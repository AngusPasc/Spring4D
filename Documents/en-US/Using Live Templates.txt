==============================================================================================
Using Live Templates
==============================================================================================


1. What's the Live Templates?
----------------------------------------------------------------------------------------------
Live templates, which are introduced since Delphi 2005 (or higher?), are reusable code statements that are accessible from the Code Editor. You can insert pre-defined code segments into your code or add your own code snippets to the Template window.

Note: If a template has one or more jump points that are editable, it will automatically enter SyncEdit mode when you are inserting it into your code. The jump points allow you to navigate between different areas of the template, using the Tab key and SHIFT+Tab keys. Pressing ESC, Enter,or pressing the Tab key from the last jump point exits SyncEdit mode and puts the Code Editor back into regular edit mode.


2. How to use the templates?
----------------------------------------------------------------------------------------------
a. Copy the templates in the "Code Templates" folder to the global code templates folder, which is normally in your Documents folder. (e.g. F:\Users\Paul\Documents\RAD Studio\code_templates)

b. Restart the Delphi IDE if necessary.

c. Enjoy it!


3. How many code templates does the delphi spring framework include?
----------------------------------------------------------------------------------------------

The live templates introduced by delphi spring framework can be divide into the following groups:

a. Properties (Class/Record/Interface)
Simple Grammar: [i] prop [array] [f|g] [f|s]

i: 	Interface (Including declaration of getter and/or setter)
array: 	Array properties (e.g. property Items[const index: Integer]: TObject)
f: 	field (disabled for interface and array properties)
g: 	getter (e.g. GetName)
s: 	setter (e.g. SetName)

b. Global Routines in Spring.System
argnotnull	TArgument.CheckNotNull(argument, 'argument');
argenum		TArgument.CheckEnum<T>(argument, 'argument');

enumc		EnumerateControls
enumcp		EnumerateControls (with predicate)
enumd		EnumerateDataSet

lock		Lock
sync		Synchronize (Also works in TThread descendents)
queue		Queue       (Also works in TThread descendents)

upds		UpdateStrings

c. Common Anonymous Methods
*proca: (Anonymous Procedure)

procedure
begin
  |end|
end;

*funca: (Anonymous Function)

function: |Boolean|
begin
  |end|
end;

*preda: (Anonymous Predicate)

function (|item|: |TObject|): Boolean
begin
  |end|
end;

note: |end| means the endpoint.

d. Others
enum		enumeration type defination (overrides the default one)
testcase	TestCase class defination template


4. References:
----------------------------------------------------------------------------------------------
* Online Help

p.s. These code templates are experimental. Any advice is welcome.

Email: baoquan.zuo#gmail.com
(You may call me Baoquan or Paul)